// Generated by Hebron at 8/29/2023 7:59:26 AM

using System;
using System.Runtime.InteropServices;

namespace UfbxSharp
{
	unsafe partial class Ufbx
	{
		public unsafe struct ufbx_string
		{
			public sbyte* data;
			public ulong length;
		}
		public unsafe struct ufbx_blob
		{
			public void* data;
			public ulong size;
		}
		public unsafe struct ufbx_vec2
		{
		}
		public unsafe struct ufbx_vec3
		{
		}
		public unsafe struct ufbx_vec4
		{
		}
		public unsafe struct ufbx_quat
		{
		}
		public unsafe struct ufbx_transform
		{
			public ufbx_vec3 translation;
			public ufbx_quat rotation;
			public ufbx_vec3 scale;
		}
		public unsafe struct ufbx_matrix
		{
		}
		public unsafe struct ufbx_void_list
		{
			public void* data;
			public ulong count;
		}
		public unsafe struct ufbx_bool_list
		{
			public bool* data;
			public ulong count;
		}
		public unsafe struct ufbx_uint32_list
		{
			public uint* data;
			public ulong count;
		}
		public unsafe struct ufbx_real_list
		{
			public float* data;
			public ulong count;
		}
		public unsafe struct ufbx_vec2_list
		{
			public ufbx_vec2* data;
			public ulong count;
		}
		public unsafe struct ufbx_vec3_list
		{
			public ufbx_vec3* data;
			public ulong count;
		}
		public unsafe struct ufbx_vec4_list
		{
			public ufbx_vec4* data;
			public ulong count;
		}
		public unsafe struct ufbx_string_list
		{
			public ufbx_string* data;
			public ulong count;
		}
		public unsafe struct ufbx_dom_node
		{
			public ufbx_string name;
			public ufbx_dom_node_list children;
			public ufbx_dom_value_list values;
		}
		public unsafe struct ufbx_dom_value
		{
			public ufbx_dom_value_type type;
			public ufbx_string value_str;
			public ufbx_blob value_blob;
			public long value_int;
			public double value_float;
		}
		public unsafe struct ufbx_dom_node_list
		{
			public ufbx_dom_node** data;
			public ulong count;
		}
		public unsafe struct ufbx_dom_value_list
		{
			public ufbx_dom_value* data;
			public ulong count;
		}
		public unsafe struct ufbx_prop
		{
			public ufbx_string name;
			public uint _internal_key;
			public ufbx_prop_type type;
			public ufbx_prop_flags flags;
			public ufbx_string value_str;
			public ufbx_blob value_blob;
			public long value_int;
		}
		public unsafe struct ufbx_props
		{
			public ufbx_prop_list props;
			public ulong num_animated;
			public ufbx_props* defaults;
		}
		public unsafe struct ufbx_prop_list
		{
			public ufbx_prop* data;
			public ulong count;
		}
		public unsafe class ufbx_scene
		{
			public ufbx_metadata metadata;
			public ufbx_scene_settings settings;
			public ufbx_node root_node;
			public ufbx_anim anim;
			public ufbx_anim combined_anim;
			public ufbx_texture_file_list texture_files;
			public ufbx_element_list elements;
			public ufbx_connection_list connections_src;
			public ufbx_connection_list connections_dst;
			public ufbx_name_element_list elements_by_name;
			public ufbx_dom_node* dom_root;
		}
		public unsafe class ufbx_element
		{
			public ufbx_string name;
			public ufbx_props props;
			public uint element_id;
			public uint typed_id;
			public ufbx_node_list instances;
			public ufbx_element_type type;
			public ufbx_connection_list connections_src;
			public ufbx_connection_list connections_dst;
			public ufbx_dom_node* dom_node;
			public ufbx_scene scene;
		}
		public unsafe struct ufbx_unknown
		{
			public ufbx_string type;
			public ufbx_string super_type;
			public ufbx_string sub_type;
		}
		public unsafe class ufbx_node
		{
			public ufbx_node parent;
			public ufbx_node_list children;
			public ufbx_mesh mesh;
			public ufbx_light* light;
			public ufbx_camera* camera;
			public ufbx_bone* bone;
			public ufbx_element attrib;
			public ufbx_node geometry_transform_helper;
			public ufbx_element_type attrib_type;
			public ufbx_element_list all_attribs;
			public ufbx_inherit_type inherit_type;
			public ufbx_transform local_transform;
			public ufbx_transform geometry_transform;
			public ufbx_rotation_order rotation_order;
			public ufbx_vec3 euler_rotation;
			public ufbx_transform world_transform;
			public ufbx_matrix node_to_parent;
			public ufbx_matrix node_to_world;
			public ufbx_matrix geometry_to_node;
			public ufbx_matrix geometry_to_world;
			public ufbx_quat adjust_pre_rotation;
			public ufbx_vec3 adjust_pre_scale;
			public ufbx_quat adjust_post_rotation;
			public ufbx_material_list materials;
			public bool visible;
			public bool is_root;
			public bool has_geometry_transform;
			public bool has_adjust_transform;
			public bool is_geometry_transform_helper;
			public uint node_depth;
		}
		public unsafe class ufbx_mesh
		{
			public ulong num_vertices;
			public ulong num_indices;
			public ulong num_faces;
			public ulong num_triangles;
			public ulong num_edges;
			public ulong max_face_triangles;
			public ulong num_empty_faces;
			public ulong num_point_faces;
			public ulong num_line_faces;
			public ufbx_face_list faces;
			public ufbx_bool_list face_smoothing;
			public ufbx_uint32_list face_material;
			public ufbx_uint32_list face_group;
			public ufbx_bool_list face_hole;
			public ufbx_edge_list edges;
			public ufbx_bool_list edge_smoothing;
			public ufbx_real_list edge_crease;
			public ufbx_bool_list edge_visibility;
			public ufbx_uint32_list vertex_indices;
			public ufbx_vec3_list vertices;
			public ufbx_uint32_list vertex_first_index;
			public ufbx_vertex_vec3 vertex_position;
			public ufbx_vertex_vec3 vertex_normal;
			public ufbx_vertex_vec2 vertex_uv;
			public ufbx_vertex_vec3 vertex_tangent;
			public ufbx_vertex_vec3 vertex_bitangent;
			public ufbx_vertex_vec4 vertex_color;
			public ufbx_vertex_real vertex_crease;
			public ufbx_uv_set_list uv_sets;
			public ufbx_color_set_list color_sets;
			public ufbx_mesh_material_list materials;
			public ufbx_face_group_list face_groups;
			public bool skinned_is_local;
			public ufbx_vertex_vec3 skinned_position;
			public ufbx_vertex_vec3 skinned_normal;
			public ufbx_skin_deformer_list skin_deformers;
			public ufbx_blend_deformer_list blend_deformers;
			public ufbx_cache_deformer_list cache_deformers;
			public ufbx_element_list all_deformers;
			public uint subdivision_preview_levels;
			public uint subdivision_render_levels;
			public ufbx_subdivision_display_mode subdivision_display_mode;
			public ufbx_subdivision_boundary subdivision_boundary;
			public ufbx_subdivision_boundary subdivision_uv_boundary;
			public bool generated_normals;
			public bool subdivision_evaluated;
			public ufbx_subdivision_result* subdivision_result;
			public bool from_tessellated_nurbs;
		}
		public unsafe struct ufbx_light
		{
			public ufbx_vec3 color;
			public float intensity;
			public ufbx_vec3 local_direction;
			public ufbx_light_type type;
			public ufbx_light_decay decay;
			public ufbx_light_area_shape area_shape;
			public float inner_angle;
			public float outer_angle;
			public bool cast_light;
			public bool cast_shadows;
		}
		public unsafe struct ufbx_camera
		{
			public ufbx_projection_mode projection_mode;
			public bool resolution_is_pixels;
			public ufbx_vec2 resolution;
			public ufbx_vec2 field_of_view_deg;
			public ufbx_vec2 field_of_view_tan;
			public float orthographic_extent;
			public ufbx_vec2 orthographic_size;
			public ufbx_vec2 projection_plane;
			public float aspect_ratio;
			public float near_plane;
			public float far_plane;
			public ufbx_coordinate_axes projection_axes;
			public ufbx_aspect_mode aspect_mode;
			public ufbx_aperture_mode aperture_mode;
			public ufbx_gate_fit gate_fit;
			public ufbx_aperture_format aperture_format;
			public float focal_length_mm;
			public ufbx_vec2 film_size_inch;
			public ufbx_vec2 aperture_size_inch;
			public float squeeze_ratio;
		}
		public unsafe struct ufbx_bone
		{
			public float radius;
			public float relative_length;
			public bool is_root;
		}
		public unsafe struct ufbx_empty
		{
		}
		public unsafe struct ufbx_line_curve
		{
			public ufbx_vec3 color;
			public ufbx_vec3_list control_points;
			public ufbx_uint32_list point_indices;
			public ufbx_line_segment_list segments;
			public bool from_tessellated_nurbs;
		}
		public unsafe struct ufbx_nurbs_curve
		{
			public ufbx_nurbs_basis basis;
			public ufbx_vec4_list control_points;
		}
		public unsafe struct ufbx_nurbs_surface
		{
			public ufbx_nurbs_basis basis_u;
			public ufbx_nurbs_basis basis_v;
			public ulong num_control_points_u;
			public ulong num_control_points_v;
			public ufbx_vec4_list control_points;
			public uint span_subdivision_u;
			public uint span_subdivision_v;
			public bool flip_normals;
			public ufbx_material* material;
		}
		public unsafe struct ufbx_nurbs_trim_surface
		{
		}
		public unsafe struct ufbx_nurbs_trim_boundary
		{
		}
		public unsafe struct ufbx_procedural_geometry
		{
		}
		public unsafe struct ufbx_stereo_camera
		{
			public ufbx_camera* left;
			public ufbx_camera* right;
		}
		public unsafe struct ufbx_camera_switcher
		{
		}
		public unsafe struct ufbx_marker
		{
			public ufbx_marker_type type;
		}
		public unsafe struct ufbx_lod_group
		{
			public bool relative_distances;
			public ufbx_lod_level_list lod_levels;
			public bool ignore_parent_transform;
			public bool use_distance_limit;
			public float distance_limit_min;
			public float distance_limit_max;
		}
		public unsafe class ufbx_skin_deformer
		{
			public ufbx_skinning_method skinning_method;
			public ufbx_skin_cluster_list clusters;
			public ufbx_skin_vertex_list vertices;
			public ufbx_skin_weight_list weights;
			public ulong max_weights_per_vertex;
			public ulong num_dq_weights;
			public ufbx_uint32_list dq_vertices;
			public ufbx_real_list dq_weights;
		}
		public unsafe class ufbx_skin_cluster
		{
			public ufbx_node bone_node;
			public ufbx_matrix geometry_to_bone;
			public ufbx_matrix mesh_node_to_bone;
			public ufbx_matrix bind_to_world;
			public ufbx_matrix geometry_to_world;
			public ufbx_transform geometry_to_world_transform;
			public ulong num_weights;
			public ufbx_uint32_list vertices;
			public ufbx_real_list weights;
		}
		public unsafe struct ufbx_blend_deformer
		{
			public ufbx_blend_channel_list channels;
		}
		public unsafe struct ufbx_blend_channel
		{
			public float weight;
			public ufbx_blend_keyframe_list keyframes;
		}
		public unsafe struct ufbx_blend_shape
		{
			public ulong num_offsets;
			public ufbx_uint32_list offset_vertices;
			public ufbx_vec3_list position_offsets;
			public ufbx_vec3_list normal_offsets;
		}
		public unsafe struct ufbx_cache_deformer
		{
			public ufbx_string channel;
			public ufbx_cache_file* file;
			public ufbx_geometry_cache* external_cache;
			public ufbx_cache_channel* external_channel;
		}
		public unsafe struct ufbx_cache_file
		{
			public ufbx_string filename;
			public ufbx_string absolute_filename;
			public ufbx_string relative_filename;
			public ufbx_blob raw_filename;
			public ufbx_blob raw_absolute_filename;
			public ufbx_blob raw_relative_filename;
			public ufbx_cache_file_format format;
			public ufbx_geometry_cache* external_cache;
		}
		public unsafe struct ufbx_material
		{
			public ufbx_material_fbx_maps fbx;
			public ufbx_material_pbr_maps pbr;
			public ufbx_material_features features;
			public ufbx_shader_type shader_type;
			public ufbx_shader* shader;
			public ufbx_string shading_model_name;
			public ufbx_string shader_prop_prefix;
			public ufbx_material_texture_list textures;
		}
		public unsafe struct ufbx_texture
		{
			public ufbx_texture_type type;
			public ufbx_string filename;
			public ufbx_string absolute_filename;
			public ufbx_string relative_filename;
			public ufbx_blob raw_filename;
			public ufbx_blob raw_absolute_filename;
			public ufbx_blob raw_relative_filename;
			public ufbx_blob content;
			public ufbx_video* video;
			public uint file_index;
			public bool has_file;
			public ufbx_texture_layer_list layers;
			public ufbx_shader_texture* shader;
			public ufbx_texture_list file_textures;
			public ufbx_string uv_set;
			public ufbx_wrap_mode wrap_u;
			public ufbx_wrap_mode wrap_v;
			public bool has_uv_transform;
			public ufbx_transform uv_transform;
			public ufbx_matrix texture_to_uv;
			public ufbx_matrix uv_to_texture;
		}
		public unsafe struct ufbx_video
		{
			public ufbx_string filename;
			public ufbx_string absolute_filename;
			public ufbx_string relative_filename;
			public ufbx_blob raw_filename;
			public ufbx_blob raw_absolute_filename;
			public ufbx_blob raw_relative_filename;
			public ufbx_blob content;
		}
		public unsafe struct ufbx_shader
		{
			public ufbx_shader_type type;
			public ufbx_shader_binding_list bindings;
		}
		public unsafe struct ufbx_shader_binding
		{
			public ufbx_shader_prop_binding_list prop_bindings;
		}
		public unsafe class ufbx_anim_stack
		{
			public double time_begin;
			public double time_end;
			public ufbx_anim_layer_list layers;
			public ufbx_anim anim;
		}
		public unsafe class ufbx_anim_layer
		{
			public float weight;
			public bool weight_is_animated;
			public bool blended;
			public bool additive;
			public bool compose_rotation;
			public bool compose_scale;
			public ufbx_anim_value_list anim_values;
			public ufbx_anim_prop_list anim_props;
			public ufbx_anim anim;
			public uint _min_element_id;
			public uint _max_element_id;
			public UnsafeArray1D<uint> _element_id_bitmaskArray = new UnsafeArray1D<uint>(4);
			public uint* _element_id_bitmask;
			public ufbx_anim_layer()
			{
				_element_id_bitmask = (uint*)_element_id_bitmaskArray;
			}
		}
		public unsafe class ufbx_anim_value
		{
			public ufbx_vec3 default_value;
			public UnsafeArray1D<ufbx_anim_curve> curvesArray = new UnsafeArray1D<ufbx_anim_curve>(3);
			public ufbx_anim_curve** curves;
			public ufbx_anim_value()
			{
				curves = (ufbx_anim_curve**)curvesArray;
			}
		}
		public unsafe struct ufbx_anim_curve
		{
			public ufbx_keyframe_list keyframes;
		}
		public unsafe class ufbx_display_layer
		{
			public ufbx_node_list nodes;
			public bool visible;
			public bool frozen;
			public ufbx_vec3 ui_color;
		}
		public unsafe class ufbx_selection_set
		{
			public ufbx_selection_node_list nodes;
		}
		public unsafe class ufbx_selection_node
		{
			public ufbx_node target_node;
			public ufbx_mesh target_mesh;
			public bool include_node;
			public ufbx_uint32_list vertices;
			public ufbx_uint32_list edges;
			public ufbx_uint32_list faces;
		}
		public unsafe struct ufbx_character
		{
		}
		public unsafe class ufbx_constraint
		{
			public ufbx_constraint_type type;
			public ufbx_string type_name;
			public ufbx_node node;
			public ufbx_constraint_target_list targets;
			public float weight;
			public bool active;
			public UnsafeArray1D<bool> constrain_translationArray = new UnsafeArray1D<bool>(3);
			public bool* constrain_translation;
			public UnsafeArray1D<bool> constrain_rotationArray = new UnsafeArray1D<bool>(3);
			public bool* constrain_rotation;
			public UnsafeArray1D<bool> constrain_scaleArray = new UnsafeArray1D<bool>(3);
			public bool* constrain_scale;
			public ufbx_transform transform_offset;
			public ufbx_vec3 aim_vector;
			public ufbx_constraint_aim_up_type aim_up_type;
			public ufbx_node aim_up_node;
			public ufbx_vec3 aim_up_vector;
			public ufbx_node ik_effector;
			public ufbx_node ik_end_node;
			public ufbx_vec3 ik_pole_vector;
			public ufbx_constraint()
			{
				constrain_translation = (bool*)constrain_translationArray;
				constrain_rotation = (bool*)constrain_rotationArray;
				constrain_scale = (bool*)constrain_scaleArray;
			}
		}
		public unsafe class ufbx_pose
		{
			public bool bind_pose;
			public ufbx_bone_pose_list bone_poses;
		}
		public unsafe struct ufbx_metadata_object
		{
		}
		public unsafe class ufbx_element_list
		{
			public ufbx_element data;
			public ulong count;
		}
		public unsafe struct ufbx_unknown_list
		{
			public ufbx_unknown** data;
			public ulong count;
		}
		public unsafe class ufbx_node_list
		{
			public ufbx_node data;
			public ulong count;
		}
		public unsafe class ufbx_mesh_list
		{
			public ufbx_mesh data;
			public ulong count;
		}
		public unsafe struct ufbx_light_list
		{
			public ufbx_light** data;
			public ulong count;
		}
		public unsafe struct ufbx_camera_list
		{
			public ufbx_camera** data;
			public ulong count;
		}
		public unsafe struct ufbx_bone_list
		{
			public ufbx_bone** data;
			public ulong count;
		}
		public unsafe struct ufbx_empty_list
		{
			public ufbx_empty** data;
			public ulong count;
		}
		public unsafe struct ufbx_line_curve_list
		{
			public ufbx_line_curve** data;
			public ulong count;
		}
		public unsafe struct ufbx_nurbs_curve_list
		{
			public ufbx_nurbs_curve** data;
			public ulong count;
		}
		public unsafe struct ufbx_nurbs_surface_list
		{
			public ufbx_nurbs_surface** data;
			public ulong count;
		}
		public unsafe struct ufbx_nurbs_trim_surface_list
		{
			public ufbx_nurbs_trim_surface** data;
			public ulong count;
		}
		public unsafe struct ufbx_nurbs_trim_boundary_list
		{
			public ufbx_nurbs_trim_boundary** data;
			public ulong count;
		}
		public unsafe struct ufbx_procedural_geometry_list
		{
			public ufbx_procedural_geometry** data;
			public ulong count;
		}
		public unsafe struct ufbx_stereo_camera_list
		{
			public ufbx_stereo_camera** data;
			public ulong count;
		}
		public unsafe struct ufbx_camera_switcher_list
		{
			public ufbx_camera_switcher** data;
			public ulong count;
		}
		public unsafe struct ufbx_marker_list
		{
			public ufbx_marker** data;
			public ulong count;
		}
		public unsafe struct ufbx_lod_group_list
		{
			public ufbx_lod_group** data;
			public ulong count;
		}
		public unsafe class ufbx_skin_deformer_list
		{
			public ufbx_skin_deformer data;
			public ulong count;
		}
		public unsafe class ufbx_skin_cluster_list
		{
			public ufbx_skin_cluster data;
			public ulong count;
		}
		public unsafe struct ufbx_blend_deformer_list
		{
			public ufbx_blend_deformer** data;
			public ulong count;
		}
		public unsafe struct ufbx_blend_channel_list
		{
			public ufbx_blend_channel** data;
			public ulong count;
		}
		public unsafe struct ufbx_blend_shape_list
		{
			public ufbx_blend_shape** data;
			public ulong count;
		}
		public unsafe struct ufbx_cache_deformer_list
		{
			public ufbx_cache_deformer** data;
			public ulong count;
		}
		public unsafe struct ufbx_cache_file_list
		{
			public ufbx_cache_file** data;
			public ulong count;
		}
		public unsafe struct ufbx_material_list
		{
			public ufbx_material** data;
			public ulong count;
		}
		public unsafe struct ufbx_texture_list
		{
			public ufbx_texture** data;
			public ulong count;
		}
		public unsafe struct ufbx_video_list
		{
			public ufbx_video** data;
			public ulong count;
		}
		public unsafe struct ufbx_shader_list
		{
			public ufbx_shader** data;
			public ulong count;
		}
		public unsafe struct ufbx_shader_binding_list
		{
			public ufbx_shader_binding** data;
			public ulong count;
		}
		public unsafe class ufbx_anim_stack_list
		{
			public ufbx_anim_stack data;
			public ulong count;
		}
		public unsafe class ufbx_anim_layer_list
		{
			public ufbx_anim_layer data;
			public ulong count;
		}
		public unsafe class ufbx_anim_value_list
		{
			public ufbx_anim_value data;
			public ulong count;
		}
		public unsafe struct ufbx_anim_curve_list
		{
			public ufbx_anim_curve** data;
			public ulong count;
		}
		public unsafe class ufbx_display_layer_list
		{
			public ufbx_display_layer data;
			public ulong count;
		}
		public unsafe class ufbx_selection_set_list
		{
			public ufbx_selection_set data;
			public ulong count;
		}
		public unsafe class ufbx_selection_node_list
		{
			public ufbx_selection_node data;
			public ulong count;
		}
		public unsafe struct ufbx_character_list
		{
			public ufbx_character** data;
			public ulong count;
		}
		public unsafe class ufbx_constraint_list
		{
			public ufbx_constraint data;
			public ulong count;
		}
		public unsafe class ufbx_pose_list
		{
			public ufbx_pose data;
			public ulong count;
		}
		public unsafe struct ufbx_metadata_object_list
		{
			public ufbx_metadata_object** data;
			public ulong count;
		}
		public unsafe class ufbx_connection
		{
			public ufbx_element src;
			public ufbx_element dst;
			public ufbx_string src_prop;
			public ufbx_string dst_prop;
		}
		public unsafe class ufbx_connection_list
		{
			public ufbx_connection data;
			public ulong count;
		}
		public unsafe struct ufbx_vertex_attrib
		{
			public bool exists;
			public ufbx_void_list values;
			public ufbx_uint32_list indices;
			public ulong value_reals;
			public bool unique_per_vertex;
		}
		public unsafe struct ufbx_vertex_real
		{
			public bool exists;
			public ufbx_real_list values;
			public ufbx_uint32_list indices;
			public ulong value_reals;
			public bool unique_per_vertex;
		}
		public unsafe struct ufbx_vertex_vec2
		{
			public bool exists;
			public ufbx_vec2_list values;
			public ufbx_uint32_list indices;
			public ulong value_reals;
			public bool unique_per_vertex;
		}
		public unsafe struct ufbx_vertex_vec3
		{
			public bool exists;
			public ufbx_vec3_list values;
			public ufbx_uint32_list indices;
			public ulong value_reals;
			public bool unique_per_vertex;
		}
		public unsafe struct ufbx_vertex_vec4
		{
			public bool exists;
			public ufbx_vec4_list values;
			public ufbx_uint32_list indices;
			public ulong value_reals;
			public bool unique_per_vertex;
		}
		public unsafe struct ufbx_uv_set
		{
			public ufbx_string name;
			public uint index;
			public ufbx_vertex_vec2 vertex_uv;
			public ufbx_vertex_vec3 vertex_tangent;
			public ufbx_vertex_vec3 vertex_bitangent;
		}
		public unsafe struct ufbx_color_set
		{
			public ufbx_string name;
			public uint index;
			public ufbx_vertex_vec4 vertex_color;
		}
		public unsafe struct ufbx_uv_set_list
		{
			public ufbx_uv_set* data;
			public ulong count;
		}
		public unsafe struct ufbx_color_set_list
		{
			public ufbx_color_set* data;
			public ulong count;
		}
		public unsafe struct ufbx_edge
		{
		}
		public unsafe struct ufbx_edge_list
		{
			public ufbx_edge* data;
			public ulong count;
		}
		public unsafe struct ufbx_face
		{
			public uint index_begin;
			public uint num_indices;
		}
		public unsafe struct ufbx_face_list
		{
			public ufbx_face* data;
			public ulong count;
		}
		public unsafe struct ufbx_mesh_material
		{
			public ufbx_material* material;
			public ulong num_faces;
			public ulong num_triangles;
			public ulong num_empty_faces;
			public ulong num_point_faces;
			public ulong num_line_faces;
			public ufbx_uint32_list face_indices;
		}
		public unsafe struct ufbx_mesh_material_list
		{
			public ufbx_mesh_material* data;
			public ulong count;
		}
		public unsafe struct ufbx_face_group
		{
			public int id;
			public ufbx_string name;
			public ulong num_faces;
			public ulong num_triangles;
			public ufbx_uint32_list face_indices;
		}
		public unsafe struct ufbx_face_group_list
		{
			public ufbx_face_group* data;
			public ulong count;
		}
		public unsafe struct ufbx_subdivision_weight_range
		{
			public uint weight_begin;
			public uint num_weights;
		}
		public unsafe struct ufbx_subdivision_weight_range_list
		{
			public ufbx_subdivision_weight_range* data;
			public ulong count;
		}
		public unsafe struct ufbx_subdivision_weight
		{
			public float weight;
			public uint index;
		}
		public unsafe struct ufbx_subdivision_weight_list
		{
			public ufbx_subdivision_weight* data;
			public ulong count;
		}
		public unsafe struct ufbx_subdivision_result
		{
			public ulong result_memory_used;
			public ulong temp_memory_used;
			public ulong result_allocs;
			public ulong temp_allocs;
			public ufbx_subdivision_weight_range_list source_vertex_ranges;
			public ufbx_subdivision_weight_list source_vertex_weights;
			public ufbx_subdivision_weight_range_list skin_cluster_ranges;
			public ufbx_subdivision_weight_list skin_cluster_weights;
		}
		public unsafe struct ufbx_coordinate_axes
		{
			public ufbx_coordinate_axis right;
			public ufbx_coordinate_axis up;
			public ufbx_coordinate_axis front;
		}
		public unsafe struct ufbx_line_segment
		{
			public uint index_begin;
			public uint num_indices;
		}
		public unsafe struct ufbx_line_segment_list
		{
			public ufbx_line_segment* data;
			public ulong count;
		}
		public unsafe struct ufbx_nurbs_basis
		{
			public uint order;
			public ufbx_nurbs_topology topology;
			public ufbx_real_list knot_vector;
			public float t_min;
			public float t_max;
			public ufbx_real_list spans;
			public bool is_2d;
			public ulong num_wrap_control_points;
			public bool valid;
		}
		public unsafe struct ufbx_lod_level
		{
			public float distance;
			public ufbx_lod_display display;
		}
		public unsafe struct ufbx_lod_level_list
		{
			public ufbx_lod_level* data;
			public ulong count;
		}
		public unsafe struct ufbx_skin_vertex
		{
			public uint weight_begin;
			public uint num_weights;
			public float dq_weight;
		}
		public unsafe struct ufbx_skin_vertex_list
		{
			public ufbx_skin_vertex* data;
			public ulong count;
		}
		public unsafe struct ufbx_skin_weight
		{
			public uint cluster_index;
			public float weight;
		}
		public unsafe struct ufbx_skin_weight_list
		{
			public ufbx_skin_weight* data;
			public ulong count;
		}
		public unsafe struct ufbx_blend_keyframe
		{
			public ufbx_blend_shape* shape;
			public float target_weight;
			public float effective_weight;
		}
		public unsafe struct ufbx_blend_keyframe_list
		{
			public ufbx_blend_keyframe* data;
			public ulong count;
		}
		public unsafe struct ufbx_cache_frame
		{
			public ufbx_string channel;
			public double time;
			public ufbx_string filename;
			public ufbx_cache_file_format file_format;
			public ufbx_cache_data_format data_format;
			public ufbx_cache_data_encoding data_encoding;
			public ulong data_offset;
			public uint data_count;
			public uint data_element_bytes;
			public ulong data_total_bytes;
		}
		public unsafe struct ufbx_cache_frame_list
		{
			public ufbx_cache_frame* data;
			public ulong count;
		}
		public unsafe struct ufbx_cache_channel
		{
			public ufbx_string name;
			public ufbx_cache_interpretation interpretation;
			public ufbx_string interpretation_name;
			public ufbx_cache_frame_list frames;
		}
		public unsafe struct ufbx_cache_channel_list
		{
			public ufbx_cache_channel* data;
			public ulong count;
		}
		public unsafe struct ufbx_geometry_cache
		{
			public ufbx_string root_filename;
			public ufbx_cache_channel_list channels;
			public ufbx_cache_frame_list frames;
			public ufbx_string_list extra_info;
		}
		public unsafe struct ufbx_material_map
		{
			public long value_int;
			public ufbx_texture* texture;
			public bool has_value;
			public bool texture_enabled;
			public bool feature_disabled;
			public byte value_components;
		}
		public unsafe struct ufbx_material_feature_info
		{
			public bool enabled;
			public bool is_explicit;
		}
		public unsafe struct ufbx_material_texture
		{
			public ufbx_string material_prop;
			public ufbx_string shader_prop;
			public ufbx_texture* texture;
		}
		public unsafe struct ufbx_material_texture_list
		{
			public ufbx_material_texture* data;
			public ulong count;
		}
		public unsafe struct ufbx_material_fbx_maps
		{
		}
		public unsafe struct ufbx_material_pbr_maps
		{
		}
		public unsafe struct ufbx_material_features
		{
		}
		public unsafe struct ufbx_texture_layer
		{
			public ufbx_texture* texture;
			public ufbx_blend_mode blend_mode;
			public float alpha;
		}
		public unsafe struct ufbx_texture_layer_list
		{
			public ufbx_texture_layer* data;
			public ulong count;
		}
		public unsafe struct ufbx_shader_texture_input
		{
			public ufbx_string name;
			public long value_int;
			public ufbx_string value_str;
			public ufbx_blob value_blob;
			public ufbx_texture* texture;
			public long texture_output_index;
			public bool texture_enabled;
			public ufbx_prop* prop;
			public ufbx_prop* texture_prop;
			public ufbx_prop* texture_enabled_prop;
		}
		public unsafe struct ufbx_shader_texture_input_list
		{
			public ufbx_shader_texture_input* data;
			public ulong count;
		}
		public unsafe struct ufbx_shader_texture
		{
			public ufbx_shader_texture_type type;
			public ufbx_string shader_name;
			public ulong shader_type_id;
			public ufbx_shader_texture_input_list inputs;
			public ufbx_string shader_source;
			public ufbx_blob raw_shader_source;
			public ufbx_texture* main_texture;
			public long main_texture_output_index;
			public ufbx_string prop_prefix;
		}
		public unsafe struct ufbx_texture_file
		{
			public uint index;
			public ufbx_string filename;
			public ufbx_string absolute_filename;
			public ufbx_string relative_filename;
			public ufbx_blob raw_filename;
			public ufbx_blob raw_absolute_filename;
			public ufbx_blob raw_relative_filename;
			public ufbx_blob content;
		}
		public unsafe struct ufbx_texture_file_list
		{
			public ufbx_texture_file* data;
			public ulong count;
		}
		public unsafe struct ufbx_shader_prop_binding
		{
			public ufbx_string shader_prop;
			public ufbx_string material_prop;
		}
		public unsafe struct ufbx_shader_prop_binding_list
		{
			public ufbx_shader_prop_binding* data;
			public ulong count;
		}
		public unsafe class ufbx_anim_layer_desc
		{
			public ufbx_anim_layer layer;
			public float weight;
		}
		public unsafe class ufbx_const_anim_layer_desc_list
		{
			public ufbx_anim_layer_desc data;
			public ulong count;
		}
		public unsafe struct ufbx_prop_override
		{
			public uint element_id;
			public sbyte* prop_name;
			public ufbx_vec3 value;
			public sbyte* value_str;
			public long value_int;
			public uint _internal_key;
		}
		public unsafe struct ufbx_const_prop_override_list
		{
			public ufbx_prop_override* data;
			public ulong count;
		}
		public unsafe class ufbx_anim
		{
			public ufbx_const_anim_layer_desc_list layers;
			public ufbx_const_prop_override_list prop_overrides;
			public bool ignore_connections;
			public double time_begin;
			public double time_end;
		}
		public unsafe class ufbx_anim_prop
		{
			public ufbx_element element;
			public uint _internal_key;
			public ufbx_string prop_name;
			public ufbx_anim_value anim_value;
		}
		public unsafe class ufbx_anim_prop_list
		{
			public ufbx_anim_prop data;
			public ulong count;
		}
		public unsafe struct ufbx_tangent
		{
			public float dx;
			public float dy;
		}
		public unsafe struct ufbx_keyframe
		{
			public double time;
			public float value;
			public ufbx_interpolation interpolation;
			public ufbx_tangent left;
			public ufbx_tangent right;
		}
		public unsafe struct ufbx_keyframe_list
		{
			public ufbx_keyframe* data;
			public ulong count;
		}
		public unsafe class ufbx_constraint_target
		{
			public ufbx_node node;
			public float weight;
			public ufbx_transform transform;
		}
		public unsafe class ufbx_constraint_target_list
		{
			public ufbx_constraint_target data;
			public ulong count;
		}
		public unsafe class ufbx_bone_pose
		{
			public ufbx_node bone_node;
			public ufbx_matrix bone_to_world;
		}
		public unsafe class ufbx_bone_pose_list
		{
			public ufbx_bone_pose data;
			public ulong count;
		}
		public unsafe class ufbx_name_element
		{
			public ufbx_string name;
			public ufbx_element_type type;
			public uint _internal_key;
			public ufbx_element element;
		}
		public unsafe class ufbx_name_element_list
		{
			public ufbx_name_element data;
			public ulong count;
		}
		public unsafe struct ufbx_application
		{
			public ufbx_string vendor;
			public ufbx_string name;
			public ufbx_string version;
		}
		public unsafe struct ufbx_warning
		{
			public ufbx_warning_type type;
			public ufbx_string description;
			public ulong count;
		}
		public unsafe struct ufbx_warning_list
		{
			public ufbx_warning* data;
			public ulong count;
		}
		public unsafe struct ufbx_metadata
		{
			public ufbx_warning_list warnings;
			public bool ascii;
			public uint version;
			public ufbx_file_format file_format;
			public bool may_contain_no_index;
			public bool may_contain_null_materials;
			public bool may_contain_missing_vertex_position;
			public bool may_contain_broken_elements;
			public bool is_unsafe;
			public fixed bool has_warning[9];
			public ufbx_string creator;
			public bool big_endian;
			public ufbx_string filename;
			public ufbx_string relative_root;
			public ufbx_blob raw_filename;
			public ufbx_blob raw_relative_root;
			public ufbx_exporter exporter;
			public uint exporter_version;
			public ufbx_props scene_props;
			public ufbx_application original_application;
			public ufbx_application latest_application;
			public bool geometry_ignored;
			public bool animation_ignored;
			public bool embedded_ignored;
			public ulong max_face_triangles;
			public ulong result_memory_used;
			public ulong temp_memory_used;
			public ulong result_allocs;
			public ulong temp_allocs;
			public ulong element_buffer_size;
			public ulong num_shader_textures;
			public float bone_prop_size_unit;
			public bool bone_prop_limb_length_relative;
			public double ktime_to_sec;
			public ufbx_string original_file_path;
			public ufbx_blob raw_original_file_path;
		}
		public unsafe struct ufbx_scene_settings
		{
			public ufbx_props props;
			public ufbx_coordinate_axes axes;
			public float unit_meters;
			public double frames_per_second;
			public ufbx_vec3 ambient_color;
			public ufbx_string default_camera;
			public ufbx_time_mode time_mode;
			public ufbx_time_protocol time_protocol;
			public ufbx_snap_mode snap_mode;
			public ufbx_coordinate_axis original_axis_up;
			public float original_unit_meters;
		}
		public unsafe struct ufbx_curve_point
		{
			public bool valid;
			public ufbx_vec3 position;
			public ufbx_vec3 derivative;
		}
		public unsafe struct ufbx_surface_point
		{
			public bool valid;
			public ufbx_vec3 position;
			public ufbx_vec3 derivative_u;
			public ufbx_vec3 derivative_v;
		}
		public unsafe struct ufbx_topo_edge
		{
			public uint index;
			public uint next;
			public uint prev;
			public uint twin;
			public uint face;
			public uint edge;
			public ufbx_topo_flags flags;
		}
		public unsafe struct ufbx_vertex_stream
		{
			public void* data;
			public ulong vertex_size;
		}
		public unsafe class ufbx_allocator
		{
			public delegate0 alloc_fn;
			public delegate1 realloc_fn;
			public delegate2 free_fn;
			public delegate3 free_allocator_fn;
			public void* user;
		}
		public unsafe class ufbx_allocator_opts
		{
			public ufbx_allocator allocator;
			public ulong memory_limit;
			public ulong allocation_limit;
			public ulong huge_threshold;
			public ulong max_chunk_size;
		}
		public unsafe class ufbx_stream
		{
			public delegate4 read_fn;
			public delegate5 skip_fn;
			public delegate3 close_fn;
			public void* user;
		}
		public unsafe class ufbx_open_file_info
		{
			public ufbx_open_file_type type;
			public ufbx_allocator temp_allocator;
			public ufbx_blob original_filename;
		}
		public unsafe class ufbx_open_file_cb
		{
			public delegate6 fn;
			public void* user;
		}
		public unsafe class ufbx_close_memory_cb
		{
			public delegate2 fn;
			public void* user;
		}
		public unsafe class ufbx_open_memory_opts
		{
			public uint _begin_zero;
			public ufbx_allocator_opts allocator;
			public bool no_copy;
			public ufbx_close_memory_cb close_cb;
			public uint _end_zero;
		}
		public unsafe struct ufbx_error_frame
		{
			public uint source_line;
			public ufbx_string function;
			public ufbx_string description;
		}
		public unsafe class ufbx_error
		{
			public ufbx_error_type type;
			public ufbx_string description;
			public uint stack_size;
			public UnsafeArray1D<ufbx_error_frame> stackArray = new UnsafeArray1D<ufbx_error_frame>(8);
			public ufbx_error_frame* stack;
			public ulong info_length;
			public UnsafeArray1D<sbyte> infoArray = new UnsafeArray1D<sbyte>(256);
			public sbyte* info;
			public ufbx_error()
			{
				stack = (ufbx_error_frame*)stackArray;
				info = (sbyte*)infoArray;
			}
		}
		public unsafe struct ufbx_progress
		{
			public ulong bytes_read;
			public ulong bytes_total;
		}
		public unsafe class ufbx_progress_cb
		{
			public delegate7 fn;
			public void* user;
		}
		public unsafe class ufbx_inflate_input
		{
			public ulong total_size;
			public void* data;
			public ulong data_size;
			public void* buffer;
			public ulong buffer_size;
			public delegate4 read_fn;
			public void* read_user;
			public ufbx_progress_cb progress_cb;
			public ulong progress_interval_hint;
			public ulong progress_size_before;
			public ulong progress_size_after;
			public bool no_header;
			public bool no_checksum;
			public ulong internal_fast_bits;
		}
		public unsafe struct ufbx_inflate_retain
		{
			public bool initialized;
			public fixed ulong data[1024];
		}
		public unsafe class ufbx_load_opts
		{
			public uint _begin_zero;
			public ufbx_allocator_opts temp_allocator;
			public ufbx_allocator_opts result_allocator;
			public bool ignore_geometry;
			public bool ignore_animation;
			public bool ignore_embedded;
			public bool ignore_all_content;
			public bool evaluate_skinning;
			public bool evaluate_caches;
			public bool load_external_files;
			public bool ignore_missing_external_files;
			public bool skip_skin_vertices;
			public bool clean_skin_weights;
			public bool disable_quirks;
			public bool strict;
			public bool allow_unsafe;
			public ufbx_index_error_handling index_error_handling;
			public bool connect_broken_elements;
			public bool allow_nodes_out_of_root;
			public bool allow_null_material;
			public bool allow_missing_vertex_position;
			public bool allow_empty_faces;
			public bool generate_missing_normals;
			public bool open_main_file_with_default;
			public sbyte path_separator;
			public ulong file_size_estimate;
			public ulong read_buffer_size;
			public ufbx_string filename;
			public ufbx_blob raw_filename;
			public ufbx_progress_cb progress_cb;
			public ulong progress_interval_hint;
			public ufbx_open_file_cb open_file_cb;
			public ufbx_geometry_transform_handling geometry_transform_handling;
			public ufbx_space_conversion space_conversion;
			public ufbx_coordinate_axes target_axes;
			public float target_unit_meters;
			public ufbx_coordinate_axes target_camera_axes;
			public ufbx_coordinate_axes target_light_axes;
			public ufbx_string geometry_transform_helper_name;
			public bool no_prop_unit_scaling;
			public bool no_anim_curve_unit_scaling;
			public bool normalize_normals;
			public bool normalize_tangents;
			public bool use_root_transform;
			public ufbx_transform root_transform;
			public ufbx_unicode_error_handling unicode_error_handling;
			public bool retain_dom;
			public ufbx_file_format file_format;
			public ulong file_format_lookahead;
			public bool no_format_from_content;
			public bool no_format_from_extension;
			public bool obj_search_mtl_by_filename;
			public bool obj_merge_objects;
			public bool obj_merge_groups;
			public bool obj_split_groups;
			public ufbx_string obj_mtl_path;
			public ufbx_blob obj_mtl_data;
			public uint _end_zero;
		}
		public unsafe class ufbx_evaluate_opts
		{
			public uint _begin_zero;
			public ufbx_allocator_opts temp_allocator;
			public ufbx_allocator_opts result_allocator;
			public bool evaluate_skinning;
			public bool evaluate_caches;
			public bool load_external_files;
			public ufbx_open_file_cb open_file_cb;
			public uint _end_zero;
		}
		public unsafe class ufbx_tessellate_curve_opts
		{
			public uint _begin_zero;
			public ufbx_allocator_opts temp_allocator;
			public ufbx_allocator_opts result_allocator;
			public uint span_subdivision;
			public uint _end_zero;
		}
		public unsafe class ufbx_tessellate_surface_opts
		{
			public uint _begin_zero;
			public ufbx_allocator_opts temp_allocator;
			public ufbx_allocator_opts result_allocator;
			public uint span_subdivision_u;
			public uint span_subdivision_v;
			public uint _end_zero;
		}
		public unsafe class ufbx_subdivide_opts
		{
			public uint _begin_zero;
			public ufbx_allocator_opts temp_allocator;
			public ufbx_allocator_opts result_allocator;
			public ufbx_subdivision_boundary boundary;
			public ufbx_subdivision_boundary uv_boundary;
			public bool ignore_normals;
			public bool interpolate_normals;
			public bool interpolate_tangents;
			public bool evaluate_source_vertices;
			public ulong max_source_vertices;
			public bool evaluate_skin_weights;
			public ulong max_skin_weights;
			public ulong skin_deformer_index;
			public uint _end_zero;
		}
		public unsafe class ufbx_geometry_cache_opts
		{
			public uint _begin_zero;
			public ufbx_allocator_opts temp_allocator;
			public ufbx_allocator_opts result_allocator;
			public ufbx_open_file_cb open_file_cb;
			public double frames_per_second;
			public uint _end_zero;
		}
		public unsafe class ufbx_geometry_cache_data_opts
		{
			public uint _begin_zero;
			public ufbx_open_file_cb open_file_cb;
			public bool additive;
			public bool use_weight;
			public float weight;
			public uint _end_zero;
		}
		public unsafe struct ufbx_panic
		{
			public bool did_panic;
			public ulong message_length;
			public fixed sbyte message[128];
		}
		public unsafe class ufbxi_bit_stream
		{
			public ulong input_left;
			public delegate4 read_fn;
			public void* read_user;
			public sbyte* buffer;
			public ulong buffer_size;
			public sbyte* chunk_begin;
			public sbyte* chunk_ptr;
			public sbyte* chunk_yield;
			public sbyte* chunk_end;
			public sbyte* chunk_real_end;
			public ulong num_read_before_chunk;
			public ulong progress_bias;
			public ulong progress_total;
			public ulong progress_interval;
			public ulong bits;
			public ulong left;
			public ufbx_progress_cb progress_cb;
			public ulong cancel_bits;
			public bool cancelled;
			public UnsafeArray1D<sbyte> local_bufferArray = new UnsafeArray1D<sbyte>(256);
			public sbyte* local_buffer;
			public ufbxi_bit_stream()
			{
				local_buffer = (sbyte*)local_bufferArray;
			}
		}
		public unsafe struct ufbxi_huff_tree
		{
			public fixed ushort fast_sym[1024];
			public fixed ushort long_sym[380];
			public fixed ushort sorted_to_sym[288];
			public fixed uint extra_shift_base[32];
			public fixed ushort extra_mask[32];
			public fixed ushort past_max_code[16];
			public fixed short code_to_sorted[16];
			public uint num_symbols;
			public uint end_of_block_bits;
		}
		public unsafe struct ufbxi_trees
		{
			public uint fast_bits;
		}
		public unsafe struct ufbxi_inflate_retain_imp
		{
			public bool initialized;
			public ufbxi_trees static_trees;
		}
		public unsafe class ufbxi_deflate_context
		{
			public ufbxi_bit_stream stream;
			public uint fast_bits;
			public sbyte* out_begin;
			public sbyte* out_ptr;
			public sbyte* out_end;
		}
		public unsafe class ufbxi_allocator
		{
			public ufbx_error error;
			public ulong current_size;
			public ulong max_size;
			public ulong num_allocs;
			public ulong max_allocs;
			public ulong huge_size;
			public ulong chunk_max;
			public ufbx_allocator_opts ator;
			public sbyte* name;
		}
		public unsafe struct ufbxi_buf_padding
		{
			public ulong original_pos;
			public ulong prev_padding;
		}
		public unsafe struct ufbxi_buf_chunk
		{
			public ufbxi_buf_chunk* root;
			public ufbxi_buf_chunk* prev;
			public ufbxi_buf_chunk* next;
			public ulong size;
			public ulong pushed_pos;
			public ulong next_size;
			public ulong padding_pos;
			public fixed sbyte data[-1];
		}
		public unsafe class ufbxi_buf
		{
			public ufbxi_allocator ator;
			public UnsafeArray1D<ufbxi_buf_chunk> chunksArray = new UnsafeArray1D<ufbxi_buf_chunk>(2);
			public ufbxi_buf_chunk** chunks;
			public ulong pos;
			public ulong size;
			public ulong num_items;
			public bool unordered;
			public bool clearable;
			public ufbxi_buf()
			{
				chunks = (ufbxi_buf_chunk**)chunksArray;
			}
		}
		public unsafe struct ufbxi_buf_state
		{
			public ufbxi_buf_chunk* chunk;
			public ulong pos;
			public ulong num_items;
		}
		public unsafe struct ufbxi_aa_node
		{
			public ufbxi_aa_node* left;
			public ufbxi_aa_node* right;
			public uint level;
			public uint index;
		}
		public unsafe class ufbxi_map
		{
			public ufbxi_allocator ator;
			public ulong data_size;
			public void* items;
			public ulong* entries;
			public uint mask;
			public uint capacity;
			public uint size;
			public delegate8 cmp_fn;
			public void* cmp_user;
			public ufbxi_buf aa_buf;
			public ufbxi_aa_node* aa_root;
		}
		public unsafe class ufbxi_warnings
		{
			public ufbx_error error;
			public ufbxi_buf result;
			public ufbxi_buf tmp_stack;
			public UnsafeArray1D<ufbx_warning> prev_warningsArray = new UnsafeArray1D<ufbx_warning>(9);
			public ufbx_warning** prev_warnings;
			public ufbxi_warnings()
			{
				prev_warnings = (ufbx_warning**)prev_warningsArray;
			}
		}
		public unsafe class ufbxi_string_pool
		{
			public ufbx_error error;
			public ufbxi_buf buf;
			public ufbxi_map map;
			public ulong initial_size;
			public sbyte* temp_str;
			public ulong temp_cap;
			public ufbx_unicode_error_handling error_handling;
			public ufbxi_warnings warnings;
		}
		public unsafe struct ufbxi_sanitized_string
		{
			public sbyte* raw_data;
			public uint raw_length;
			public uint utf8_length;
		}
		public unsafe struct ufbxi_node
		{
			public sbyte* name;
			public uint num_children;
			public byte name_len;
			public ushort value_type_mask;
			public ufbxi_node* children;
		}
		public unsafe struct ufbxi_value_array
		{
			public void* data;
			public ulong size;
			public sbyte type;
		}
		public unsafe struct ufbxi_refcount
		{
			public ufbxi_refcount* parent;
			public void* align_0;
			public uint self_magic;
			public uint type_magic;
			public fixed ulong zero_pad_pre[8];
			public ulong refcount;
			public fixed ulong zero_pad_post[8];
		}
		public unsafe class ufbxi_scene_imp
		{
			public ufbxi_refcount refcount;
			public ufbx_scene scene;
			public uint magic;
			public ufbxi_allocator ator;
			public ufbxi_buf result_buf;
			public ufbxi_buf string_buf;
		}
		public unsafe class ufbxi_mesh_imp
		{
			public ufbxi_refcount refcount;
			public ufbx_mesh mesh;
			public uint magic;
			public ufbxi_allocator ator;
			public ufbxi_buf result_buf;
		}
		public unsafe struct ufbxi_ascii_token
		{
			public sbyte* str_data;
			public ulong str_len;
			public ulong str_cap;
			public sbyte type;
			public bool negative;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public double f64;
				[FieldOffset(0)]
				public long i64;
				[FieldOffset(0)]
				public ulong name_len;
			}

			public unnamed1 value;
		}
		public unsafe struct ufbxi_ascii
		{
			public ulong max_token_length;
			public sbyte* src;
			public sbyte* src_yield;
			public sbyte* src_end;
			public bool read_first_comment;
			public bool found_version;
			public bool parse_as_f32;
			public ufbxi_ascii_token prev_token;
			public ufbxi_ascii_token token;
		}
		public unsafe struct ufbxi_template
		{
			public sbyte* type;
			public ufbx_string sub_type;
			public ufbx_props props;
		}
		public unsafe struct ufbxi_fbx_id_entry
		{
			public ulong fbx_id;
			public uint element_id;
			public uint user_id;
		}
		public unsafe struct ufbxi_fbx_attr_entry
		{
			public ulong node_fbx_id;
			public ulong attr_fbx_id;
		}
		public unsafe struct ufbxi_tmp_connection
		{
			public ulong src;
			public ulong dst;
			public ufbx_string src_prop;
			public ufbx_string dst_prop;
		}
		public unsafe struct ufbxi_element_info
		{
			public ulong fbx_id;
			public ufbx_string name;
			public ufbx_props props;
			public ufbx_dom_node* dom_node;
		}
		public unsafe struct ufbxi_tmp_bone_pose
		{
			public ulong bone_fbx_id;
			public ufbx_matrix bone_to_world;
		}
		public unsafe struct ufbxi_tmp_mesh_texture
		{
			public ufbx_string prop_name;
			public uint* face_texture;
			public ulong num_faces;
			public bool all_same;
		}
		public unsafe struct ufbxi_mesh_extra
		{
			public ufbxi_tmp_mesh_texture* texture_arr;
			public ulong texture_count;
		}
		public unsafe struct ufbxi_tmp_material_texture
		{
			public int material_id;
			public int texture_id;
			public ufbx_string prop_name;
		}
		public unsafe struct ufbxi_texture_extra
		{
			public int* blend_modes;
			public ulong num_blend_modes;
			public float* alphas;
			public ulong num_alphas;
		}
		public unsafe struct ufbxi_obj_index_range
		{
			public ulong min_ix;
			public ulong max_ix;
		}
		public unsafe class ufbxi_obj_mesh
		{
			public ulong num_faces;
			public ulong num_indices;
			public UnsafeArray1D<ufbxi_obj_index_range> vertex_rangeArray = new UnsafeArray1D<ufbxi_obj_index_range>(3);
			public ufbxi_obj_index_range* vertex_range;
			public ufbx_node fbx_node;
			public ufbx_mesh fbx_mesh;
			public ulong fbx_node_id;
			public ulong fbx_mesh_id;
			public uint usemtl_base;
			public uint num_groups;
			public ufbxi_obj_mesh()
			{
				vertex_range = (ufbxi_obj_index_range*)vertex_rangeArray;
			}
		}
		public unsafe struct ufbxi_obj_group_entry
		{
			public sbyte* name;
			public uint local_id;
			public uint mesh_id;
		}
		public unsafe struct ufbxi_obj_fast_indices
		{
			public ulong* indices;
			public ulong num_left;
		}
		public unsafe class ufbxi_obj_context
		{
			public ufbx_string line;
			public ufbx_string* tokens;
			public ulong tokens_cap;
			public ulong num_tokens;
			public UnsafeArray1D<ufbxi_obj_fast_indices> fast_indicesArray = new UnsafeArray1D<ufbxi_obj_fast_indices>(3);
			public ufbxi_obj_fast_indices* fast_indices;
			public UnsafeArray1D<ulong> vertex_countArray = new UnsafeArray1D<ulong>(4);
			public ulong* vertex_count;
			public ufbxi_buf[] tmp_vertices = new ufbxi_buf[4];
			public ufbxi_buf[] tmp_indices = new ufbxi_buf[4];
			public ufbxi_buf tmp_color_valid;
			public ufbxi_buf tmp_faces;
			public ufbxi_buf tmp_face_smoothing;
			public ufbxi_buf tmp_face_group;
			public ufbxi_buf tmp_face_group_infos;
			public ufbxi_buf tmp_face_material;
			public ufbxi_buf tmp_meshes;
			public ufbxi_buf tmp_props;
			public ufbxi_map group_map;
			public ulong read_progress;
			public ufbxi_obj_mesh mesh;
			public ulong usemtl_fbx_id;
			public uint usemtl_index;
			public ufbx_string usemtl_name;
			public uint face_material;
			public uint face_group;
			public bool has_face_group;
			public bool face_smoothing;
			public bool has_face_smoothing;
			public bool has_vertex_color;
			public ulong mrgb_vertex_count;
			public bool eof;
			public bool initialized;
			public ufbx_blob mtllib_relative_path;
			public ufbx_material** tmp_materials;
			public ulong tmp_materials_cap;
			public ufbx_string _object_;
			public ufbx_string group;
			public bool material_dirty;
			public bool object_dirty;
			public bool group_dirty;
			public bool face_group_dirty;
			public ufbxi_obj_context()
			{
				fast_indices = (ufbxi_obj_fast_indices*)fast_indicesArray;
				vertex_count = (ulong*)vertex_countArray;
				for (var i = 0; i < 4; ++i)
				{
					tmp_vertices[i] = new ufbxi_buf();
				}

				for (var i = 0; i < 4; ++i)
				{
					tmp_indices[i] = new ufbxi_buf();
				}
			}
		}
		public unsafe class ufbxi_context
		{
			public ufbx_error error;
			public uint version;
			public ufbx_exporter exporter;
			public uint exporter_version;
			public bool from_ascii;
			public bool local_big_endian;
			public bool file_big_endian;
			public bool sure_fbx;
			public ufbx_load_opts opts;
			public ulong data_offset;
			public delegate4 read_fn;
			public delegate5 skip_fn;
			public delegate3 close_fn;
			public void* read_user;
			public sbyte* read_buffer;
			public ulong read_buffer_size;
			public sbyte* data_begin;
			public sbyte* data;
			public ulong yield_size;
			public ulong data_size;
			public ufbxi_allocator ator_result;
			public ufbxi_allocator ator_tmp;
			public ufbxi_map prop_type_map;
			public ufbxi_map fbx_id_map;
			public ufbxi_map texture_file_map;
			public ufbxi_map fbx_attr_map;
			public ufbxi_map node_prop_set;
			public ufbxi_map dom_node_map;
			public sbyte* tmp_arr;
			public ulong tmp_arr_size;
			public sbyte* swap_arr;
			public ulong swap_arr_size;
			public ulong max_zero_indices;
			public ulong max_consecutive_indices;
			public ufbxi_buf tmp;
			public ufbxi_buf tmp_parse;
			public ufbxi_buf tmp_stack;
			public ufbxi_buf tmp_connections;
			public ufbxi_buf tmp_node_ids;
			public ufbxi_buf tmp_elements;
			public ufbxi_buf tmp_element_offsets;
			public ufbxi_buf tmp_element_ptrs;
			public ufbxi_buf[] tmp_typed_element_offsets = new ufbxi_buf[40];
			public ufbxi_buf tmp_mesh_textures;
			public ufbxi_buf tmp_full_weights;
			public ufbxi_buf tmp_dom_nodes;
			public ulong tmp_element_byte_offset;
			public ufbxi_template* templates;
			public ulong num_templates;
			public ufbx_dom_node* dom_parse_toplevel;
			public ulong dom_parse_num_children;
			public ufbxi_string_pool string_pool;
			public ufbxi_buf result;
			public ufbxi_node* top_nodes;
			public ulong top_nodes_len;
			public ulong top_nodes_cap;
			public bool parsed_to_end;
			public ufbxi_node* top_node;
			public ulong top_child_index;
			public ufbxi_node top_child;
			public bool has_next_child;
			public uint* zero_indices;
			public uint* consecutive_indices;
			public long progress_timer;
			public ulong progress_bytes_total;
			public ulong latest_progress_bytes;
			public ulong progress_interval;
			public void** element_extra_arr;
			public ulong element_extra_cap;
			public ufbxi_ascii ascii;
			public bool has_geometry_transform_nodes;
			public ufbxi_node root;
			public ufbx_scene scene;
			public ufbxi_scene_imp scene_imp;
			public ufbx_inflate_retain* inflate_retain;
			public ulong root_id;
			public uint num_elements;
			public ufbxi_node legacy_node;
			public ulong legacy_implicit_anim_layer_id;
			public double ktime_to_sec;
			public bool eof;
			public ufbxi_obj_context obj;
			public ufbx_matrix axis_matrix;
			public float unit_scale;
			public ufbxi_warnings warnings;
			public ufbxi_context()
			{
				for (var i = 0; i < 40; ++i)
				{
					tmp_typed_element_offsets[i] = new ufbxi_buf();
				}
			}
		}
		public unsafe class ufbxi_memory_stream
		{
			public void* data;
			public ulong size;
			public ulong position;
			public ufbx_close_memory_cb close_cb;
			public ulong self_size;
			public ufbxi_allocator ator;
			public ufbx_error error;
			public UnsafeArray1D<sbyte> data_copyArray = new UnsafeArray1D<sbyte>(-1);
			public sbyte* data_copy;
			public ufbxi_memory_stream()
			{
				data_copy = (sbyte*)data_copyArray;
			}
		}
		public unsafe struct ufbxi_xml_tag
		{
			public ufbx_string name;
			public ufbx_string text;
			public ufbxi_xml_attrib* attribs;
			public ulong num_attribs;
			public ufbxi_xml_tag* children;
			public ulong num_children;
		}
		public unsafe struct ufbxi_xml_attrib
		{
			public ufbx_string name;
			public ufbx_string value;
		}
		public unsafe class ufbxi_xml_document
		{
			public ufbxi_xml_tag* root;
			public ufbxi_buf buf;
		}
		public unsafe class ufbxi_xml_context
		{
			public ufbx_error error;
			public ufbxi_allocator ator;
			public ufbxi_buf tmp_stack;
			public ufbxi_buf result;
			public ufbxi_xml_document doc;
			public delegate4 read_fn;
			public void* read_user;
			public sbyte* tok;
			public ulong tok_cap;
			public ulong tok_len;
			public sbyte* pos;
			public sbyte* pos_end;
			public UnsafeArray1D<sbyte> dataArray = new UnsafeArray1D<sbyte>(4096);
			public sbyte* data;
			public bool io_error;
			public ufbxi_xml_context()
			{
				data = (sbyte*)dataArray;
			}
		}
		public unsafe class ufbxi_xml_load_opts
		{
			public ufbxi_allocator ator;
			public delegate4 read_fn;
			public void* read_user;
			public sbyte* prefix;
			public ulong prefix_length;
		}
		public unsafe struct ufbxi_array_info
		{
			public sbyte type;
			public byte flags;
		}
		public unsafe struct ufbxi_dom_mapping
		{
			public ulong node_ptr;
			public ufbx_dom_node* dom_node;
		}
		public unsafe struct ufbxi_prop_type_name
		{
			public sbyte* name;
			public ufbx_prop_type type;
		}
		public unsafe struct ufbxi_texture_file_entry
		{
			public sbyte* key;
			public ufbx_texture_file* file;
		}
		public unsafe struct ufbxi_node_extra
		{
			public uint geometry_helper_id;
		}
		public unsafe struct ufbxi_tangent_layer
		{
			public ufbx_vertex_vec3 elem;
			public uint index;
		}
		public unsafe struct ufbxi_blend_offset
		{
			public uint vertex;
			public ufbx_vec3 position_offset;
			public ufbx_vec3 normal_offset;
		}
		public unsafe struct ufbxi_id_group
		{
			public uint id;
			public uint index;
		}
		public unsafe struct ufbxi_constraint_type
		{
			public ufbx_constraint_type type;
			public sbyte* name;
		}
		public unsafe struct ufbxi_legacy_prop
		{
			public sbyte* prop_name;
			public ufbx_prop_type prop_type;
			public sbyte* node_name;
			public sbyte* node_fmt;
		}
		public unsafe class ufbxi_pre_connection
		{
			public ufbx_element src;
			public ufbx_element dst;
		}
		public unsafe struct ufbxi_shader_mapping
		{
			public byte index;
			public byte flags;
			public byte transform;
			public byte prop_len;
			public sbyte* prop;
		}
		public unsafe struct ufbxi_shader_mapping_list
		{
			public ufbxi_shader_mapping* data;
			public ulong count;
			public ufbxi_shader_mapping* features;
			public ulong feature_count;
			public uint default_features;
			public ufbx_string texture_prefix;
			public ufbx_string texture_suffix;
			public ufbx_string texture_enabled_prefix;
			public ufbx_string texture_enabled_suffix;
		}
		public unsafe struct ufbxi_glossiness_remap
		{
			public byte feature;
			public byte roughness_map;
			public byte glossiness_map;
		}
		public unsafe struct ufbxi_constraint_prop
		{
			public ufbxi_constraint_prop_type type;
			public sbyte* name;
		}
		public unsafe struct ufbxi_file_shader
		{
			public ulong shader_id;
			public sbyte* shader_name;
			public sbyte* input_name;
		}
		public unsafe struct ufbxi_ordered_texture
		{
			public ufbx_texture* texture;
			public ulong order;
		}
		public unsafe struct ufbxi_aperture_format
		{
			public ushort film_size_x;
			public ushort film_size_y;
		}
		public unsafe class ufbxi_geometry_cache_imp
		{
			public ufbxi_refcount refcount;
			public ufbx_geometry_cache cache;
			public uint magic;
			public bool owned_by_scene;
			public ufbxi_allocator ator;
			public ufbxi_buf result_buf;
			public ufbxi_buf string_buf;
		}
		public unsafe struct ufbxi_cache_tmp_channel
		{
			public ufbx_string name;
			public ufbx_string interpretation;
			public uint sample_rate;
			public uint start_time;
			public uint end_time;
			public uint current_time;
			public uint consecutive_fails;
			public bool try_load;
		}
		public unsafe class ufbxi_cache_context
		{
			public ufbx_error error;
			public ufbx_string filename;
			public bool owned_by_scene;
			public bool ignore_if_not_found;
			public ufbx_geometry_cache_opts opts;
			public ufbxi_allocator ator_tmp;
			public ufbxi_allocator ator_result;
			public ufbxi_buf result;
			public ufbxi_buf tmp;
			public ufbxi_buf tmp_stack;
			public ufbxi_cache_tmp_channel* channels;
			public ulong num_channels;
			public sbyte* tmp_arr;
			public ulong tmp_arr_size;
			public ufbxi_string_pool string_pool;
			public ufbx_open_file_cb open_file_cb;
			public double frames_per_second;
			public ufbx_string stream_filename;
			public ufbx_stream stream;
			public bool mc_for8;
			public ufbx_string xml_filename;
			public uint xml_ticks_per_frame;
			public ufbxi_cache_xml_type xml_type;
			public ufbxi_cache_xml_format xml_format;
			public ufbx_string channel_name;
			public sbyte* name_buf;
			public ulong name_cap;
			public ulong file_offset;
			public sbyte* pos;
			public sbyte* pos_end;
			public ufbx_geometry_cache cache;
			public ufbxi_geometry_cache_imp imp;
			public UnsafeArray1D<sbyte> bufferArray = new UnsafeArray1D<sbyte>(128);
			public sbyte* buffer;
			public ufbxi_cache_context()
			{
				buffer = (sbyte*)bufferArray;
			}
		}
		public unsafe struct ufbxi_cache_interpretation_name
		{
			public ufbx_cache_interpretation interpretation;
			public sbyte* pattern;
		}
		public unsafe struct ufbxi_external_file
		{
			public ufbxi_external_file_type type;
			public ufbx_string filename;
			public ufbx_string absolute_filename;
			public ulong index;
			public void* data;
			public ulong data_size;
		}
		public unsafe class ufbxi_anim_layer_combine_ctx
		{
			public ufbx_anim anim;
			public ufbx_element element;
			public double time;
			public ufbx_rotation_order rotation_order;
			public bool has_rotation_order;
		}
		public unsafe class ufbxi_eval_context
		{
			public sbyte* src_element;
			public sbyte* dst_element;
			public ufbxi_scene_imp src_imp;
			public ufbx_scene src_scene;
			public ufbx_evaluate_opts opts;
			public ufbx_anim anim;
			public double time;
			public ufbx_error error;
			public ufbxi_allocator ator_result;
			public ufbxi_allocator ator_tmp;
			public ufbxi_buf result;
			public ufbxi_buf tmp;
			public ufbx_scene scene;
			public ufbxi_scene_imp scene_imp;
		}
		public unsafe class ufbxi_line_curve_imp
		{
			public ufbxi_refcount refcount;
			public ufbx_line_curve curve;
			public uint magic;
			public ufbxi_allocator ator;
			public ufbxi_buf result_buf;
		}
		public unsafe class ufbxi_tessellate_curve_context
		{
			public ufbx_error error;
			public ufbx_tessellate_curve_opts opts;
			public ufbx_nurbs_curve* curve;
			public ufbxi_allocator ator_tmp;
			public ufbxi_allocator ator_result;
			public ufbxi_buf result;
			public ufbx_line_curve line;
			public ufbxi_line_curve_imp imp;
		}
		public unsafe class ufbxi_tessellate_surface_context
		{
			public ufbx_error error;
			public ufbx_tessellate_surface_opts opts;
			public ufbx_nurbs_surface* surface;
			public ufbxi_allocator ator_tmp;
			public ufbxi_allocator ator_result;
			public ufbxi_buf tmp;
			public ufbxi_buf result;
			public ufbxi_map position_map;
			public ufbx_mesh mesh;
			public ufbxi_mesh_imp imp;
		}
		public unsafe struct ufbxi_kd_node
		{
			public float split;
			public uint index;
			public uint slow_left;
			public uint slow_right;
			public uint slow_end;
		}
		public unsafe class ufbxi_ngon_context
		{
			public ufbx_face face;
			public ufbx_vertex_vec3 positions;
			public UnsafeArray1D<ufbx_vec3> axesArray = new UnsafeArray1D<ufbx_vec3>(3);
			public ufbx_vec3* axes;
			public UnsafeArray1D<ufbxi_kd_node> kd_nodesArray = new UnsafeArray1D<ufbxi_kd_node>(128);
			public ufbxi_kd_node* kd_nodes;
			public uint* kd_indices;
			public ufbx_vec3 cur_axis_dir;
			public ufbx_face cur_face;
			public ufbxi_ngon_context()
			{
				axes = (ufbx_vec3*)axesArray;
				kd_nodes = (ufbxi_kd_node*)kd_nodesArray;
			}
		}
		public unsafe class ufbxi_kd_triangle
		{
			public UnsafeArray1D<float> min_tArray = new UnsafeArray1D<float>(2);
			public float* min_t;
			public UnsafeArray1D<float> max_tArray = new UnsafeArray1D<float>(2);
			public float* max_t;
			public UnsafeArray1D<ufbx_vec2> pointsArray = new UnsafeArray1D<ufbx_vec2>(3);
			public ufbx_vec2* points;
			public UnsafeArray1D<uint> indicesArray = new UnsafeArray1D<uint>(3);
			public uint* indices;
			public ufbxi_kd_triangle()
			{
				min_t = (float*)min_tArray;
				max_t = (float*)max_tArray;
				points = (ufbx_vec2*)pointsArray;
				indices = (uint*)indicesArray;
			}
		}
		public unsafe struct ufbxi_subdivide_input
		{
			public void* data;
			public float weight;
		}
		public unsafe class ufbxi_subdivide_layer_input
		{
			public delegate9 sum_fn;
			public void* sum_user;
			public void* values;
			public ulong stride;
			public uint* indices;
			public bool check_split_data;
			public bool ignore_indices;
			public ufbx_subdivision_boundary boundary;
		}
		public unsafe struct ufbxi_subdivide_layer_output
		{
			public void* values;
			public ulong num_values;
			public uint* indices;
			public ulong num_indices;
			public bool unique_per_vertex;
		}
		public unsafe struct ufbxi_subdivision_vertex_weights
		{
			public ufbx_subdivision_weight* weights;
			public ulong num_weights;
		}
		public unsafe class ufbxi_subdivide_context
		{
			public ufbxi_mesh_imp imp;
			public ufbx_error error;
			public ufbx_mesh src_mesh_ptr;
			public ufbx_mesh src_mesh;
			public ufbx_mesh dst_mesh;
			public ufbx_topo_edge* topo;
			public ulong num_topo;
			public ufbx_subdivide_opts opts;
			public ufbxi_allocator ator_result;
			public ufbxi_allocator ator_tmp;
			public ufbxi_buf result;
			public ufbxi_buf tmp;
			public ufbxi_buf source;
			public ufbxi_subdivide_input* inputs;
			public ulong inputs_cap;
			public float* tmp_vertex_weights;
			public ufbx_subdivision_weight* tmp_weights;
			public ulong total_weights;
			public ulong max_vertex_weights;
		}
		public unsafe struct ufbxi_vertex_stream
		{
			public sbyte* begin;
			public sbyte* ptr;
			public ulong vertex_size;
			public ulong packed_offset;
		}
	}
}